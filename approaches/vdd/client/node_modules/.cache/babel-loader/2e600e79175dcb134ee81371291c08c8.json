{"ast":null,"code":"var _jsxFileName = \"/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/context/appContext.tsx\";\nimport React, { createContext, useReducer } from \"react\";\nvar ColorTheme;\n\n(function (ColorTheme) {\n  ColorTheme[\"plasma\"] = \"plasma\";\n  ColorTheme[\"bw\"] = \"bw\";\n  ColorTheme[\"PiYG\"] = \"PiYG\";\n})(ColorTheme || (ColorTheme = {}));\n\n;\nvar TypeConstr;\n\n(function (TypeConstr) {\n  TypeConstr[\"plasma\"] = \"confidence\";\n  TypeConstr[\"bw\"] = \"support\";\n  TypeConstr[\"PiYG\"] = \"InterestF\";\n})(TypeConstr || (TypeConstr = {}));\n\n;\nexport const AppContext = createContext({\n  state: {},\n  dispatch: () => null\n});\nAppContext.displayName = \"AppContext\";\nexport const SET_SESSION_ID_ACTION = \"SET_SESSION_ID_ACTION\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_SESSION_ID_ACTION:\n      {\n        var _action$payload;\n\n        return { ...state,\n          sessionId: (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.sessionId\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst wrappedDispatch = dispatch => action => {\n  console.log(\"DISPATCH ACTION\", action);\n  dispatch(action);\n};\n\nexport const AppContextProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, {});\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      state,\n      dispatch: wrappedDispatch(dispatch)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/context/appContext.tsx"],"names":["React","createContext","useReducer","ColorTheme","TypeConstr","AppContext","state","dispatch","displayName","SET_SESSION_ID_ACTION","reducer","action","type","sessionId","payload","wrappedDispatch","console","log","AppContextProvider","children"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,aAApB,EAAmCC,UAAnC,QAAqD,OAArD;IAEKC,U;;WAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAIJ;IAEIC,U;;WAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAIJ;AA6BD,OAAO,MAAMC,UAAU,GAAGJ,aAAa,CAGpC;AACDK,EAAAA,KAAK,EAAE,EADN;AAEDC,EAAAA,QAAQ,EAAE,MAAM;AAFf,CAHoC,CAAhC;AAOPF,UAAU,CAACG,WAAX,GAAyB,YAAzB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;;AAEP,MAAMC,OAAO,GAAG,CACdJ,KADc,EAEdK,MAFc,KAGO;AACrB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKH,qBAAL;AAA4B;AAAA;;AAC1B,eAAO,EACL,GAAGH,KADE;AAELO,UAAAA,SAAS,qBAAEF,MAAM,CAACG,OAAT,oDAAE,gBAAgBD;AAFtB,SAAP;AAID;;AAED;AACE,aAAOP,KAAP;AATJ;AAWD,CAfD;;AAiBA,MAAMS,eAAe,GAAIR,QAAD,IAAoCI,MAAD,IAA0B;AACnFK,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,MAA/B;AAEAJ,EAAAA,QAAQ,CAACI,MAAD,CAAR;AACD,CAJD;;AAMA,OAAO,MAAMO,kBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACb,KAAD,EAAQC,QAAR,IAAoBL,UAAU,CAACQ,OAAD,EAAU,EAAV,CAApC;AACA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEQ,eAAe,CAACR,QAAD;AAAlC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGY,QADH,CADF;AAKD,CAPM","sourcesContent":["import React, { FC, createContext, useReducer } from \"react\";\n\nenum ColorTheme {\n  plasma = \"plasma\",\n  bw = \"bw\",\n  PiYG = \"PiYG\",\n};\n\nenum TypeConstr {\n  plasma = \"confidence\",\n  bw = \"support\",\n  PiYG = \"InterestF\",\n};\n\ntype TAppContextState = {\n  sessionId?: string;\n  cluCut?: {\n    default?: number;\n    max?: number;\n    min?: number;\n  };\n  colorTheme?: ColorTheme [];\n  selectedTheme?: ColorTheme;\n  driftAll?: boolean;\n  noSort?: boolean;\n  sliBy?: {\n    default?: number;\n    max?: number;\n    min?: number;\n  };\n  subL?: {\n    default?: number;\n    max?: number;\n    min?: number;\n  };\n  typeConstr?: TypeConstr [];\n  selectedTypeConstr?: TypeConstr;\n}\n\ntype TStoreAction = { type: string; payload: { [key: string]: any } };\n\nexport const AppContext = createContext<{\n  state: TAppContextState;\n  dispatch: React.Dispatch<TStoreAction>;\n}>({\n  state: {},\n  dispatch: () => null,\n});\nAppContext.displayName = \"AppContext\";\n\nexport const SET_SESSION_ID_ACTION = \"SET_SESSION_ID_ACTION\";\n\nconst reducer = (\n  state: TAppContextState,\n  action: TStoreAction,\n): TAppContextState => {\n  switch (action.type) {\n    case SET_SESSION_ID_ACTION: {\n      return {\n        ...state,\n        sessionId: action.payload?.sessionId,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst wrappedDispatch = (dispatch: React.Dispatch<any>) => (action: TStoreAction) => {\n  console.log(\"DISPATCH ACTION\", action);\n\n  dispatch(action);\n};\n\nexport const AppContextProvider: FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, {});\n  return (\n    <AppContext.Provider value={{ state, dispatch: wrappedDispatch(dispatch) }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}