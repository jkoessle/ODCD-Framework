{"ast":null,"code":"import { parse } from \"papaparse\";\nexport const API_URL = \"https://processdrift.ai.wu.ac.at\"; // const API_URL = 'http://127.0.0.1:5000';\n\nconst cleanUpParams = params => Object.entries(params).reduce((acc, [key, value]) => {\n  if (value) {\n    acc[key] = value;\n  }\n\n  return acc;\n}, {});\n\nconst generateGetURLWithParams = (path, params) => {\n  let url = new URL(`${API_URL}${path}`);\n  url.search = new URLSearchParams({ ...(params ? cleanUpParams(params) : {})\n  }).toString();\n  return url.toString();\n};\n\nexport const uploadFile = body => fetch(`${API_URL}/uploadFile`, {\n  method: \"POST\",\n  body\n}).then(response => response.json()).catch(console.error);\nexport const makeDriftMap = params => {\n  return fetch(generateGetURLWithParams(\"/makeDriftMap\", params)).then(response => response.json());\n};\nexport const parseErraticMeasureCsv = path => fetch(`${API_URL}${path}`).then(response => response.text()).then(res => parse(res, {\n  skipEmptyLines: true\n})).then(({\n  data,\n  errors\n}) => {\n  if (errors.length > 0) {\n    throw errors;\n  }\n\n  console.log({\n    data\n  });\n  return data.slice(1);\n}).catch(console.error);\nexport const makeStationarityTest = params => fetch(generateGetURLWithParams(\"/makeStationarityTest\", params)).then(response => response.json()).then(({\n  path_to_stationarity\n}) => fetch(`${API_URL}${path_to_stationarity}`)).then(res => res.text()).then(res => parse(res, {\n  skipEmptyLines: true\n})).then(({\n  data,\n  errors\n}) => {\n  if (errors.length > 0) {\n    throw errors;\n  }\n\n  console.log({\n    data\n  });\n  return data.slice(1);\n}).catch(console.error);\nexport const makeSpreadOfConstraints = params => {\n  return fetch(generateGetURLWithParams(\"/makeSpreadOfConstraints\", params)).then(response => response.json());\n};\nexport const makeAutocorrelationPlots = params => fetch(generateGetURLWithParams(\"/makeAutocorrelationPlots\", params)).then(response => response.json());\nexport const makeEDFG = params => fetch(generateGetURLWithParams(\"/makeEDFG\", params)).then(response => response.json());","map":{"version":3,"sources":["/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/apiService.ts"],"names":["parse","API_URL","cleanUpParams","params","Object","entries","reduce","acc","key","value","generateGetURLWithParams","path","url","URL","search","URLSearchParams","toString","uploadFile","body","fetch","method","then","response","json","catch","console","error","makeDriftMap","parseErraticMeasureCsv","text","res","skipEmptyLines","data","errors","length","log","slice","makeStationarityTest","path_to_stationarity","makeSpreadOfConstraints","makeAutocorrelationPlots","makeEDFG"],"mappings":"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","sourcesContent":["import { parse, ParseResult } from \"papaparse\";\n\nexport const API_URL = \"https://processdrift.ai.wu.ac.at\";\n// const API_URL = 'http://127.0.0.1:5000';\n\nconst cleanUpParams = (params: { [key: string]: any }) =>\n  Object.entries(params).reduce((acc: { [key: string]: any }, [key, value]) => {\n    if (value) {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n\nconst generateGetURLWithParams = (\n  path: string,\n  params?: { [key: string]: any }\n): string => {\n  let url = new URL(`${API_URL}${path}`);\n  url.search = new URLSearchParams({\n    ...(params ? cleanUpParams(params) : {}),\n  }).toString();\n\n  return url.toString();\n};\n\nexport const uploadFile = (body: FormData) =>\n  fetch(`${API_URL}/uploadFile`, {\n    method: \"POST\",\n    body,\n  })\n    .then((response) => response.json())\n    .catch(console.error);\n\nexport const makeDriftMap = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeDriftMap\", params)\n  ).then((response) => response.json());\n};\n\nexport const parseErraticMeasureCsv = (path: string) =>\n  fetch(`${API_URL}${path}`)\n    .then((response) => response.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeStationarityTest = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(generateGetURLWithParams(\"/makeStationarityTest\", params))\n    .then((response) => response.json())\n    .then(({ path_to_stationarity }) =>\n      fetch(`${API_URL}${path_to_stationarity}`)\n    )\n    .then((res) => res.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeSpreadOfConstraints = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeSpreadOfConstraints\", params)\n  ).then((response) => response.json());\n};\n\nexport const makeAutocorrelationPlots = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(\n    generateGetURLWithParams(\"/makeAutocorrelationPlots\", params)\n  ).then((response) => response.json());\n\nexport const makeEDFG = (params: { logName: string; [key: string]: any }) =>\n  fetch(\n    generateGetURLWithParams(\"/makeEDFG\", params)\n  ).then((response) => response.json());\n"]},"metadata":{},"sourceType":"module"}