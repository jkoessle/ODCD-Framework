{"ast":null,"code":"var _jsxFileName = \"/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/components/AlgorithmResultComponent/index.tsx\";\nimport React, { useContext } from \"react\";\nimport { Select, Row, Col, Typography, Button } from \"antd\";\nimport { API_URL } from \"../../apiService\";\nimport { AppContext, SET_ALGORITHM_SLICE_INDEX, SET_ALGORITHM_RESULT } from \"../../context/appContext\";\nimport { makeEDFG } from \"../../apiService\";\nimport { ErraticMeasureSlider } from \"./ErraticMeasureSlider\";\nimport { SpreadConstraintsSlider } from \"./SpreadConstraintsSlider\";\nexport const AlgorithmResultComponent = () => {\n  var _state$algorithmResul, _stationarityTestResu;\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n\n  if (!((_state$algorithmResul = state.algorithmResult) === null || _state$algorithmResul === void 0 ? void 0 : _state$algorithmResul.path_to_driftmap)) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    }, \"Start algorithm to see result here!\");\n  }\n\n  const selectAlgorithmSliceIndex = index => dispatch({\n    type: SET_ALGORITHM_SLICE_INDEX,\n    payload: {\n      index\n    }\n  });\n\n  const getEdfgHandler = async () => {\n    if (state.session_id) {\n      const params = {\n        logName: state.session_id,\n        ...state.defined\n      };\n      const {\n        paths_to_edfgs: edfgs\n      } = await makeEDFG(params);\n      dispatch({\n        type: SET_ALGORITHM_RESULT,\n        payload: { ...state.algorithmResult,\n          edfgs\n        }\n      });\n    }\n  };\n\n  const {\n    algorithmResult: {\n      path_to_driftmap,\n      erraticMeasureData = [],\n      paths_to_drift_plots = [],\n      spread_constraints,\n      stationarityTestResult,\n      autocorrelationPlots,\n      edfgs\n    },\n    algorithmSliceIndex = 0\n  } = state;\n  console.log({\n    edfgs\n  });\n  const pValue = (_stationarityTestResu = stationarityTestResult[algorithmSliceIndex]) === null || _stationarityTestResu === void 0 ? void 0 : _stationarityTestResu[2];\n  const pValueText = pValue > 0.05 ? `Incremental drift present, p = ${pValue}` : `No incremental drift, p = ${pValue}`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${path_to_driftmap}`,\n    alt: \"Drift map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    onChange: selectAlgorithmSliceIndex,\n    defaultValue: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, erraticMeasureData.map((elem, index) => /*#__PURE__*/React.createElement(Select.Option, {\n    value: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Section \", index))), (edfgs === null || edfgs === void 0 ? void 0 : edfgs[algorithmSliceIndex]) ? /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${edfgs[algorithmSliceIndex]}`,\n    alt: \"EDGF\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    onClick: getEdfgHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Get EDFG\"), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography.Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, \"Erratic measure\"), /*#__PURE__*/React.createElement(ErraticMeasureSlider, {\n    selected: algorithmSliceIndex,\n    data: erraticMeasureData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography.Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Spread of constraints\"), /*#__PURE__*/React.createElement(SpreadConstraintsSlider, {\n    value: spread_constraints,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography.Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, pValueText)), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    offset: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${paths_to_drift_plots[algorithmSliceIndex]}`,\n    alt: \"drift plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${autocorrelationPlots[algorithmSliceIndex]}`,\n    alt: \"autocorrelation plots\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/components/AlgorithmResultComponent/index.tsx"],"names":["React","useContext","Select","Row","Col","Typography","Button","API_URL","AppContext","SET_ALGORITHM_SLICE_INDEX","SET_ALGORITHM_RESULT","makeEDFG","ErraticMeasureSlider","SpreadConstraintsSlider","AlgorithmResultComponent","state","dispatch","algorithmResult","path_to_driftmap","selectAlgorithmSliceIndex","index","type","payload","getEdfgHandler","session_id","params","logName","defined","paths_to_edfgs","edfgs","erraticMeasureData","paths_to_drift_plots","spread_constraints","stationarityTestResult","autocorrelationPlots","algorithmSliceIndex","console","log","pValue","pValueText","map","elem"],"mappings":"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","sourcesContent":["import React, { FC, useContext } from \"react\";\n\nimport { Select, Row, Col, Typography, Button } from \"antd\";\nimport { API_URL } from \"../../apiService\";\nimport {\n  AppContext,\n  TAppContextState,\n  TDispatchType,\n  SET_ALGORITHM_SLICE_INDEX,\n  SET_ALGORITHM_RESULT,\n} from \"../../context/appContext\";\n\nimport { makeEDFG } from \"../../apiService\";\n\nimport { ErraticMeasureSlider } from \"./ErraticMeasureSlider\";\nimport { SpreadConstraintsSlider } from \"./SpreadConstraintsSlider\";\n\nexport const AlgorithmResultComponent: FC = () => {\n  const { state, dispatch } = useContext<{\n    state: TAppContextState;\n    dispatch: TDispatchType;\n  }>(AppContext);\n  if (!state.algorithmResult?.path_to_driftmap) {\n    return <div>Start algorithm to see result here!</div>;\n  }\n\n  const selectAlgorithmSliceIndex = (index: number) =>\n    dispatch({\n      type: SET_ALGORITHM_SLICE_INDEX,\n      payload: { index },\n    });\n\n  const getEdfgHandler = async () => {\n    if (state.session_id) {\n      const params = { logName: state.session_id, ...state.defined };\n      const { paths_to_edfgs: edfgs } = await makeEDFG(params);\n\n      dispatch({\n        type: SET_ALGORITHM_RESULT,\n        payload: {\n          ...state.algorithmResult,\n          edfgs,\n        },\n      });\n    }\n  };\n\n  const {\n    algorithmResult: {\n      path_to_driftmap,\n      erraticMeasureData = [],\n      paths_to_drift_plots = [],\n      spread_constraints,\n      stationarityTestResult,\n      autocorrelationPlots,\n      edfgs,\n    },\n    algorithmSliceIndex = 0,\n  } = state;\n\n  console.log({edfgs})\n\n  const pValue: number = stationarityTestResult[algorithmSliceIndex]?.[2];\n  const pValueText: string =\n    pValue > 0.05\n      ? `Incremental drift present, p = ${pValue}`\n      : `No incremental drift, p = ${pValue}`;\n\n  return (\n    <div>\n      <img src={`${API_URL}${path_to_driftmap}`} alt=\"Drift map\" />\n      <Select onChange={selectAlgorithmSliceIndex} defaultValue={0}>\n        {erraticMeasureData.map((elem, index) => (\n          <Select.Option value={index}>Section {index}</Select.Option>\n        ))}\n      </Select>\n      {edfgs?.[algorithmSliceIndex] ? (\n        <img\n          src={`${API_URL}${edfgs[algorithmSliceIndex]}`}\n          alt=\"EDGF\"\n        />\n      ) : (\n        <Button onClick={getEdfgHandler}>Get EDFG</Button>\n      )}\n      <Row>\n        <Col span={10}>\n          <Typography.Title level={3}>Erratic measure</Typography.Title>\n          <ErraticMeasureSlider\n            selected={algorithmSliceIndex}\n            data={erraticMeasureData}\n          />\n          <Typography.Title level={3}>Spread of constraints</Typography.Title>\n          <SpreadConstraintsSlider value={spread_constraints} />\n          <Typography.Title level={3}>{pValueText}</Typography.Title>\n        </Col>\n        <Col span={12} offset={2}>\n          <img\n            src={`${API_URL}${paths_to_drift_plots[algorithmSliceIndex]}`}\n            alt=\"drift plot\"\n          />\n          <img\n            src={`${API_URL}${autocorrelationPlots[algorithmSliceIndex]}`}\n            alt=\"autocorrelation plots\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}