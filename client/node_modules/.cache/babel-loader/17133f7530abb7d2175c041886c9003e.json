{"ast":null,"code":"import _objectSpread from\"/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{parse}from\"papaparse\";export var API_URL=\"https://processdrift.ai.wu.ac.at\";// const API_URL = 'http://127.0.0.1:5000';\nvar cleanUpParams=function cleanUpParams(params){return Object.entries(params).reduce(function(acc,_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];if(value){acc[key]=value;}return acc;},{});};var generateGetURLWithParams=function generateGetURLWithParams(path,params){var url=new URL(\"\".concat(API_URL).concat(path));url.search=new URLSearchParams(_objectSpread({},params?cleanUpParams(params):{})).toString();return url.toString();};export var uploadFile=function uploadFile(body){return fetch(\"\".concat(API_URL,\"/uploadFile\"),{method:\"POST\",body:body}).then(function(response){return response.json();}).catch(console.error);};export var makeDriftMap=function makeDriftMap(params){return fetch(generateGetURLWithParams(\"/makeDriftMap\",params)).then(function(response){return response.json();});};export var parseErraticMeasureCsv=function parseErraticMeasureCsv(path){return fetch(\"\".concat(API_URL).concat(path)).then(function(response){return response.text();}).then(function(res){return parse(res,{skipEmptyLines:true});}).then(function(_ref3){var data=_ref3.data,errors=_ref3.errors;if(errors.length>0){throw errors;}console.log({data:data});return data.slice(1);}).catch(console.error);};export var makeStationarityTest=function makeStationarityTest(params){return fetch(generateGetURLWithParams(\"/makeStationarityTest\",params)).then(function(response){return response.json();}).then(function(_ref4){var path_to_stationarity=_ref4.path_to_stationarity;return fetch(\"\".concat(API_URL).concat(path_to_stationarity));}).then(function(res){return res.text();}).then(function(res){return parse(res,{skipEmptyLines:true});}).then(function(_ref5){var data=_ref5.data,errors=_ref5.errors;if(errors.length>0){throw errors;}console.log({data:data});return data.slice(1);}).catch(console.error);};export var makeSpreadOfConstraints=function makeSpreadOfConstraints(params){return fetch(generateGetURLWithParams(\"/makeSpreadOfConstraints\",params)).then(function(response){return response.json();});};export var makeAutocorrelationPlots=function makeAutocorrelationPlots(params){return fetch(generateGetURLWithParams(\"/makeAutocorrelationPlots\",params)).then(function(response){return response.json();});};export var makeEDFG=function makeEDFG(params){return fetch(generateGetURLWithParams(\"/makeEDFG\",params)).then(function(response){return response.json();});};","map":{"version":3,"sources":["/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/apiService.ts"],"names":["parse","API_URL","cleanUpParams","params","Object","entries","reduce","acc","key","value","generateGetURLWithParams","path","url","URL","search","URLSearchParams","toString","uploadFile","body","fetch","method","then","response","json","catch","console","error","makeDriftMap","parseErraticMeasureCsv","text","res","skipEmptyLines","data","errors","length","log","slice","makeStationarityTest","path_to_stationarity","makeSpreadOfConstraints","makeAutocorrelationPlots","makeEDFG"],"mappings":"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","sourcesContent":["import { parse, ParseResult } from \"papaparse\";\n\nexport const API_URL = \"https://processdrift.ai.wu.ac.at\";\n// const API_URL = 'http://127.0.0.1:5000';\n\nconst cleanUpParams = (params: { [key: string]: any }) =>\n  Object.entries(params).reduce((acc: { [key: string]: any }, [key, value]) => {\n    if (value) {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n\nconst generateGetURLWithParams = (\n  path: string,\n  params?: { [key: string]: any }\n): string => {\n  let url = new URL(`${API_URL}${path}`);\n  url.search = new URLSearchParams({\n    ...(params ? cleanUpParams(params) : {}),\n  }).toString();\n\n  return url.toString();\n};\n\nexport const uploadFile = (body: FormData) =>\n  fetch(`${API_URL}/uploadFile`, {\n    method: \"POST\",\n    body,\n  })\n    .then((response) => response.json())\n    .catch(console.error);\n\nexport const makeDriftMap = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeDriftMap\", params)\n  ).then((response) => response.json());\n};\n\nexport const parseErraticMeasureCsv = (path: string) =>\n  fetch(`${API_URL}${path}`)\n    .then((response) => response.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeStationarityTest = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(generateGetURLWithParams(\"/makeStationarityTest\", params))\n    .then((response) => response.json())\n    .then(({ path_to_stationarity }) =>\n      fetch(`${API_URL}${path_to_stationarity}`)\n    )\n    .then((res) => res.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeSpreadOfConstraints = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeSpreadOfConstraints\", params)\n  ).then((response) => response.json());\n};\n\nexport const makeAutocorrelationPlots = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(\n    generateGetURLWithParams(\"/makeAutocorrelationPlots\", params)\n  ).then((response) => response.json());\n\nexport const makeEDFG = (params: { logName: string; [key: string]: any }) =>\n  fetch(\n    generateGetURLWithParams(\"/makeEDFG\", params)\n  ).then((response) => response.json());\n"]},"metadata":{},"sourceType":"module"}