{"ast":null,"code":"var _jsxFileName = \"/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/components/AlgorithmResultComponent/index.tsx\";\nimport React, { useContext } from \"react\";\nimport { Select, Row, Col, Typography } from \"antd\";\nimport { API_URL } from \"../../apiService\";\nimport { AppContext, SET_ALGORITHM_SLICE_INDEX } from \"../../context/appContext\";\nimport { ErraticMeasureComponent } from \"./ErraticMeasureComponent\";\nexport const AlgorithmResultComponent = () => {\n  var _state$algorithmResul;\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n\n  if (!((_state$algorithmResul = state.algorithmResult) === null || _state$algorithmResul === void 0 ? void 0 : _state$algorithmResul.path_to_driftmap)) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, \"Start algorithm to see result here!\");\n  }\n\n  const selectAlgorithmSliceIndex = index => dispatch({\n    type: SET_ALGORITHM_SLICE_INDEX,\n    payload: {\n      index\n    }\n  });\n\n  const {\n    algorithmResult: {\n      path_to_driftmap,\n      erraticMeasureData = [],\n      paths_to_drift_plots = []\n    },\n    algorithmSliceIndex = 0\n  } = state;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${path_to_driftmap}`,\n    alt: \"Drift map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    onChange: selectAlgorithmSliceIndex,\n    defaultValue: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, erraticMeasureData.map((elem, index) => /*#__PURE__*/React.createElement(Select.Option, {\n    value: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Section \", index))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography.Title, {\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"Erratic measure\"), /*#__PURE__*/React.createElement(ErraticMeasureComponent, {\n    selected: algorithmSliceIndex,\n    data: erraticMeasureData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    offset: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `${API_URL}${paths_to_drift_plots[algorithmSliceIndex]}`,\n    alt: \"drift plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/yesh/Documents/WritePrograms/Process-Drift-Visualization-With-Declare/client/src/components/AlgorithmResultComponent/index.tsx"],"names":["React","useContext","Select","Row","Col","Typography","API_URL","AppContext","SET_ALGORITHM_SLICE_INDEX","ErraticMeasureComponent","AlgorithmResultComponent","state","dispatch","algorithmResult","path_to_driftmap","selectAlgorithmSliceIndex","index","type","payload","erraticMeasureData","paths_to_drift_plots","algorithmSliceIndex","map","elem"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,UAApB,QAAsC,OAAtC;AAEA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,UAA3B,QAA6C,MAA7C;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SACEC,UADF,EAIEC,yBAJF,QAKO,0BALP;AAOA,SAASC,uBAAT,QAAwC,2BAAxC;AAEA,OAAO,MAAMC,wBAA4B,GAAG,MAAM;AAAA;;AAChD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBX,UAAU,CAGnCM,UAHmC,CAAtC;;AAIA,MAAI,2BAACI,KAAK,CAACE,eAAP,0DAAC,sBAAuBC,gBAAxB,CAAJ,EAA8C;AAC5C,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAP;AACD;;AAED,QAAMC,yBAAyB,GAAIC,KAAD,IAChCJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAET,yBADC;AAEPU,IAAAA,OAAO,EAAE;AAAEF,MAAAA;AAAF;AAFF,GAAD,CADV;;AAMA,QAAM;AACJH,IAAAA,eAAe,EAAE;AAAEC,MAAAA,gBAAF;AAAoBK,MAAAA,kBAAkB,GAAG,EAAzC;AAA6CC,MAAAA,oBAAoB,GAAG;AAApE,KADb;AAEJC,IAAAA,mBAAmB,GAAG;AAFlB,MAGFV,KAHJ;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAG,GAAEL,OAAQ,GAAEQ,gBAAiB,EAAxC;AAA2C,IAAA,GAAG,EAAC,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEC,yBAAlB;AAA6C,IAAA,YAAY,EAAE,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,kBAAkB,CAACG,GAAnB,CAAuB,CAACC,IAAD,EAAOP,KAAP,kBACtB,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,KAAK,EAAEA,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCA,KAAtC,CADD,CADH,CAFF,eAOE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD,CAAY,KAAZ;AAAkB,IAAA,KAAK,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE,oBAAC,uBAAD;AACE,IAAA,QAAQ,EAAEK,mBADZ;AAEE,IAAA,IAAI,EAAEF,kBAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAQE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAe,IAAA,MAAM,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAG,GAAEb,OAAQ,GAAEc,oBAAoB,CAACC,mBAAD,CAAsB,EAAjE;AAAoE,IAAA,GAAG,EAAC,YAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CAPF,CADF;AAsBD,CA1CM","sourcesContent":["import React, { FC, useContext } from \"react\";\n\nimport { Select, Row, Col, Typography } from \"antd\";\nimport { API_URL } from \"../../apiService\";\nimport {\n  AppContext,\n  TAppContextState,\n  TDispatchType,\n  SET_ALGORITHM_SLICE_INDEX,\n} from \"../../context/appContext\";\n\nimport { ErraticMeasureComponent } from \"./ErraticMeasureComponent\";\n\nexport const AlgorithmResultComponent: FC = () => {\n  const { state, dispatch } = useContext<{\n    state: TAppContextState;\n    dispatch: TDispatchType;\n  }>(AppContext);\n  if (!state.algorithmResult?.path_to_driftmap) {\n    return <div>Start algorithm to see result here!</div>;\n  }\n\n  const selectAlgorithmSliceIndex = (index: number) =>\n    dispatch({\n      type: SET_ALGORITHM_SLICE_INDEX,\n      payload: { index },\n    });\n\n  const {\n    algorithmResult: { path_to_driftmap, erraticMeasureData = [], paths_to_drift_plots = [] },\n    algorithmSliceIndex = 0,\n  } = state;\n\n  return (\n    <div>\n      <img src={`${API_URL}${path_to_driftmap}`} alt=\"Drift map\"/>\n      <Select onChange={selectAlgorithmSliceIndex} defaultValue={0}>\n        {erraticMeasureData.map((elem, index) => (\n          <Select.Option value={index}>Section {index}</Select.Option>\n        ))}\n      </Select>\n      <Row>\n        <Col span={10}>\n          <Typography.Title level={3}>Erratic measure</Typography.Title>\n          <ErraticMeasureComponent\n            selected={algorithmSliceIndex}\n            data={erraticMeasureData}\n          />\n        </Col>\n        <Col span={12} offset={2}>\n          <img src={`${API_URL}${paths_to_drift_plots[algorithmSliceIndex]}`} alt=\"drift plot\"/>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}