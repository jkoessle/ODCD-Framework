import os
import utils.config as config
import pm4py as pm
import polars as pl
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from pm4py.objects.log.importer.xes import importer as xes_importer
from pm4py.objects.log.obj import EventLog
from pm4py.algo.filtering.log.attributes import attributes_filter
from deprecated import deprecated


def get_event_log_paths():
    list_of_files = {}
    for dir_path, dir_names, filenames in os.walk(config.DEFAULT_LOG_DIR):
        for filename in filenames:
            if filename.endswith('.xes'):
                list_of_files[filename] = dir_path

    assert len(list_of_files) > 0, f"{config.DEFAULT_LOG_DIR} is empty"

    return list_of_files


def import_event_log(path, name):
    variant = xes_importer.Variants.ITERPARSE
    parameters = {variant.value.Parameters.TIMESTAMP_SORT: True, 
                  variant.value.Parameters.SHOW_PROGRESS_BAR: False}
    event_log = xes_importer.apply(os.path.join(
        path, name), variant=variant, parameters=parameters)

    return event_log


def read_event_log(path, name):
    event_log = pm.read_xes(os.path.join(
        path, name))

    return pl.DataFrame(event_log)


def filter_complete_events(log: EventLog):
    try:
        filtered_log = attributes_filter.apply_events(log, ["COMPLETE"], parameters={
            attributes_filter.Parameters.ATTRIBUTE_KEY: "lifecycle:transition",
            attributes_filter.Parameters.POSITIVE: True})
    except Exception:
        filtered_log = log
    
    return filtered_log    


def export_nested_log_information(log_info):
    pass


def get_nested_log_information(log: EventLog) -> tuple[dict, dict]:
    """Get metadata information of given event log generated by CDLG tool. 
    Returns information on drift and noise generated during log creation.

    Args:
        log (EventLog): EventLog generated with CDLG

    Returns:
        tuple[dict, dict]: two dicts containing information on drift and noise
    """
    
    #TODO: workaround - CDLG currently only supports noise info for logs without drift
    try:
        drift_info = log.attributes["drift:info"]["children"]
        noise_info = log.attributes["noise:info"]["children"]
    except Exception:
        drift_info = {"drift_type":"no_drift"}
        noise_info = log.attributes["noise:info"]["children"]
        
    return noise_info, drift_info


@deprecated(version='0.1', reason="This function was for a previous version of CDLG")
def get_collection_information() -> pl.DataFrame:
    """Return polars DataFrame with information about event log

    Returns:
        pl.DataFrame: contains metadata of event log
    """
    path = os.path.join(config.DEFAULT_LOG_DIR, "collection_info.csv")

    return pl.read_csv(path)


def matrix_to_img(matrix, number, drift_type, mode="color"):

    if mode == "color":
        # Get the color map by name:
        cm = plt.get_cmap('viridis')
        # Apply the colormap like a function to any array:
        colored_image = cm(matrix)

        im = Image.fromarray((colored_image[:, :, :3] * 255).astype(np.uint8))

    elif mode == "gray":
        im = Image.fromarray(matrix).convert("RGB")

    if drift_type == "gradual":
        im.save(os.path.join(config.DEFAULT_TRAIN_DATA_DIR,
                "gradual", f"gradual_{number}.png"))
    elif drift_type == "sudden":
        im.save(os.path.join(config.DEFAULT_TRAIN_DATA_DIR,
                "sudden", f"sudden_{number}.png"))
    elif drift_type == "no_drift":
        im.save(os.path.join(config.DEFAULT_TRAIN_DATA_DIR,
                "no_drift", f"no_drift_{number}.png"))
    elif drift_type == "eval":
        im.save(os.path.join(config.DEFAULT_EVAL_DATA_DIR,
                f"eval_{number}.png"))
